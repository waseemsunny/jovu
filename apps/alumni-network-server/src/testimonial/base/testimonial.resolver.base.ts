/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Testimonial } from "./Testimonial";
import { TestimonialCountArgs } from "./TestimonialCountArgs";
import { TestimonialFindManyArgs } from "./TestimonialFindManyArgs";
import { TestimonialFindUniqueArgs } from "./TestimonialFindUniqueArgs";
import { CreateTestimonialArgs } from "./CreateTestimonialArgs";
import { UpdateTestimonialArgs } from "./UpdateTestimonialArgs";
import { DeleteTestimonialArgs } from "./DeleteTestimonialArgs";
import { User } from "../../user/base/User";
import { TestimonialService } from "../testimonial.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Testimonial)
export class TestimonialResolverBase {
  constructor(
    protected readonly service: TestimonialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "read",
    possession: "any",
  })
  async _testimonialsMeta(
    @graphql.Args() args: TestimonialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Testimonial])
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "read",
    possession: "any",
  })
  async testimonials(
    @graphql.Args() args: TestimonialFindManyArgs
  ): Promise<Testimonial[]> {
    return this.service.testimonials(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Testimonial, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "read",
    possession: "own",
  })
  async testimonial(
    @graphql.Args() args: TestimonialFindUniqueArgs
  ): Promise<Testimonial | null> {
    const result = await this.service.testimonial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testimonial)
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "create",
    possession: "any",
  })
  async createTestimonial(
    @graphql.Args() args: CreateTestimonialArgs
  ): Promise<Testimonial> {
    return await this.service.createTestimonial({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testimonial)
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "update",
    possession: "any",
  })
  async updateTestimonial(
    @graphql.Args() args: UpdateTestimonialArgs
  ): Promise<Testimonial | null> {
    try {
      return await this.service.updateTestimonial({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Testimonial)
  @nestAccessControl.UseRoles({
    resource: "Testimonial",
    action: "delete",
    possession: "any",
  })
  async deleteTestimonial(
    @graphql.Args() args: DeleteTestimonialArgs
  ): Promise<Testimonial | null> {
    try {
      return await this.service.deleteTestimonial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Testimonial): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
